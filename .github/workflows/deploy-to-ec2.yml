name: Deploy Code to Application Server

# Trigger deployment only on push to master branch
on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@master
        
      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build and push Docker image
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap
          docker buildx build --load -t my-doc-app:latest .
          docker tag my-doc-app:latest ${{ secrets.DOCKERHUB_USERNAME }}/fexam:latest
          echo $(docker images)
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/fexam:latest

      - name: Check Docker Image Build
        run: |
          if docker inspect my-doc-app:latest &> /dev/null; then
            echo "Docker image built successfully. Test passed!"
          else
            echo "Docker image not found. Test failed."
            exit 1
          fi

      - name: Check Docker Image Pushed
        run: |
          if docker manifest inspect ${{ secrets.DOCKERHUB_USERNAME }}/fexam:latest &> /dev/null; then
            echo "Docker image pushed to Docker Hub successfully. Test passed!"
          else
            echo "Docker image not found on Docker Hub. Test failed."
            exit 1
          fi

      - name: Logout from Docker Hub
        run: docker logout

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DNS }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            existing_container=$(docker ps -q -f name=my-doc-app)
            if [ ! -z "$existing_container" ]; then
                echo "Stopping and removing existing container..."
                docker stop $existing_container
                docker rm $existing_container
            fi
            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/fexam:latest
            docker run -d -p 80:80 --name my-doc-app ${{ secrets.DOCKERHUB_USERNAME }}/fexam:latest
            docker image prune -f
  automated-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Test Website Functionality
        run: |
          CONTAINER_ID=$(docker ps --filter "name=my-doc-app" --format "{{.ID}}")
          STATUS_CODE=$(docker exec -it $CONTAINER_ID curl -s -o /dev/null -w "%{http_code}" http://localhost)

          if [ "$STATUS_CODE" == "200" ]; then
            echo "Website is accessible. Automated tests passed!"
          else
            echo "Website is not accessible. Automated tests failed!"
            exit 1
          fi
